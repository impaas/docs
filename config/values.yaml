# ImPaaS values for tsuru-stack.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

tsuru-api:
  nameOverride: api

  service:
    type: LoadBalancer
    httpsOnly: false
    httpPort: 80
    targetHTTPPort: 8080
    httpsPort: 443
    targetHTTPSPort: 8443

  ingress:
    enabled: true
    ingressClassName: webapprouting.kubernetes.azure.com
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
    hosts:
      - host: ${YOUR_DOMAIN}
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - hosts:
        - ${YOUR_DOMAIN}
        secretName: tsuru-api-tls

  certManager:
    enabled: true
    issuerRef:
      group: cert-manager.io
      kind: Issuer
      name: letsencrypt-prod
    dnsNames:
      - ${YOUR_DOMAIN}

  indexPageTemplate: "<html><head></head><body><h1>Hello!</h1></body></html>"

  tsuruConfig:
    host: "https://${YOUR_DOMAIN}"
    useTLS: "true"

    database:
      mongodbURL: "mongodb://tsuru:tsuru@tsuru-mongodb/tsuru"

    auth:
      scheme: "oauth"
      user-registration: "true"
      oauth:
        clientID: "${ENTRA_CLIENT_ID}"
        clientSecret: "${ENTRA_CLIENT_SECRET}"
        scope: "https://graph.microsoft.com/User.Read"
        authURL: "https://login.microsoftonline.com/${SUBSCRIPTION_ID}/oauth2/v2.0/authorize"
        tokenURL: "https://login.microsoftonline.com/${SUBSCRIPTION_ID}/oauth2/v2.0/token"
        infoURL: "https://graph.microsoft.com/v1.0/me"
        callbackPort: 38080

    queue:
      mongodbURL: "mongodb://tsuru:tsuru@tsuru-mongodb/tsuru"

    provisioner: "kubernetes"

    clusters:
      defaults:
        build-service-address: "dns:///tsuru-deploy-agent:80"
        registry-insecure: "false"
        registry: "${REGISTRY_URL}"
        build-service-tls: "false"
        disable-default-node-selector: "true"
        job-event-creation: "false"

    docker:
      registry: ${REGISTRY_URL}:443
      resolve-registry-name: false
      gc:
        dry-run: false
      router: ingress-router
      cluster:
        storage: mongodb
        mongo-url: "mongodb://tsuru:tsuru@tsuru-mongodb/tsuru"
        mongo-database: tsuru

    routers:
      ingress-router:
        type: api
        api-url: http://tsuru-kubernetes-router/api/ingress
        headers:
          Authorization: "Basic YWRtaW46bXlwYXNzd29yZA=="
          X-Router-Opt: "tls-acme=true"

    volumePlans:
      azurefile:
        kubernetes:
          storage-class: azurefile

    log:
      disableSyslog: true

    debug: true

kubernetes-router:
  service:
    type: ClusterIP
  controllerModes:
    - ingress-nginx
  ingressExpose:
    domain: ${YOUR_DOMAIN}
    port: 443
  arguments:
    - "-ingress-class"
    - "webapprouting.kubernetes.azure.com"
    - "-use-ingress-class-name=true"
    - "-ingress-annotations-prefix"
    - "nginx.ingress.kubernetes.io"
    - "-k8s-annotations"
    - "nginx.ingress.kubernetes.io/proxy-body-size=0"

  api:
    username: "admin"
    password: "mypassword"

mongodb:
  enabled: true
  image:
    repository: mongo
    tag: 4.4.24
  extraEnvVars:
    - name: MONGO_INITDB_ROOT_USERNAME
      value: "root"
    - name: MONGO_INITDB_ROOT_PASSWORD
      value: "tsuru"
    - name: MONGO_INITDB_DATABASE
      value: "tsuru"
  auth:
    rootPassword: tsuru
    rootUser: root
    usernames:
      - tsuru
    passwords:
      - tsuru
    databases:
      - tsuru
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  persistence:
    mountPath: "/data/db"
  initdbScripts:
    init_tsuru_script.js: |
      db.createUser(
        {
            user: "tsuru",
            pwd: "tsuru",
            roles: [
                {
                    role: "readWrite",
                    db: "tsuru"
                }
            ]
        }
      );

deploy-agent:
  buildkit:
    config: |
      # Buildkitd config file
      # https://github.com/moby/buildkit/blob/master/docs/buildkitd.toml.md

      [grpc]
        address = [
          "tcp://0.0.0.0:8081",
          "unix:///run/buildkit/buildkitd.sock",
        ]

      [worker.containerd]
        enabled = false

      [worker.oci]
        enabled = true
        gc = false

        # NOTE: Force x86_64 arch as Tsuru doesn't support different ones yet.
        platforms = [
          "linux/amd64"
        ]

      [registry."${REGISTRY_URL}"]
        insecure = false

      # vim: ft=toml
  dockerConfigName: tsuru-deploy-agent-docker-config
  deployAgent:
    dockerConfig: |
      {
        "auths": {
          "tsururegistry.azurecr.io": {
            "auth": "${REGISTRY_AUTH_TOKEN}"
          }
        }
      }

monitoring:
  enabled: false

ingress-nginx:
  enabled: false

certManager:
  enabled: false

registry:
  enabled: false

registryAliases:
  enabled: false
